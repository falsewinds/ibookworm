{% extends 'default.html.j2' %}

{% block content %}
{% include 'navigator.html.j2'%}
<div class="-wrapper">
    <div id="caption"></div>
    <div id="tools"></div>
    <ul id="toc"></ul>
</div>
{% endblock %}

<script>
{% block script %}
app.extends("repository",[],(scope)=>{
    let with_id = (tag,id)=>{
        return tag+"[kj-toc-id=\""+id+"\"]";
    };
    scope.Layout = app.layout({
        "caption": {
            "element": "#caption",
            "methods": {
                "set": function(capt) { this.text(capt); }
            }
        },
        "tools": {
            "element": "#tools",
            "methods": {
                "add": function(icon,text,click) {
                    //let css = "button" + (icon!=null) ? ("."+icon) : "";
                    let css = "button";
                    if (icon!=null) { css += "[kj-icon=\""+icon+"\"]"; }
                    this.append(app.dom(css,text).listen("click",click));
                }
            }
        },
        "toc": {
            "element": "#toc",
            "methods": {
                "load": function(queue) {
                    this.clear();
                    // queue should be an Array
                    while (queue.length>0) {
                        let q = queue.shift(),
                            p = this;
                        if (q.parent!=null) {
                            p = this.query(with_id("li",q.parent)+" > ul");
                            if (p==null) {
                                console.warn("Cannot find parent.");
                                p = this;
                            }
                        }
                        let li = app.dom(with_id("li",q.sn));
                        p.append(li);
                        li.append(app.dom("a",q.title)
                            .set_attr("href","/view/"+scope.id+"/"+q.sn)
                        );
                        if (q.type=="folder") {
                            let ul = app.dom("ul");
                            li.append(ul);
                            continue;
                        }
                        li.append(app.dom("span.member",q.editor));
                        li.append(app.dom("span.update",q.updated));
                    }
                }
            }
        }
    });

    scope.enter = function(repo_data) {
        let tools = this.Layout.get("tools");
        tools.add("edit","modify",()=>{
            app.dialog("Modify",[
                { "name": "alias", "title": "alias" },
                { "name": "name", "title": "name" }
            ]).then((data)=>{
                return app.post("/modify/"+scope.id,data);
            }).then((json)=>{
                console.log(json);
            }).catch((e)=>{ console.log(e); });
        });
        tools.add("delete","remove",()=>{
            app.dialog("Delete",[
                {   "name": "confirmed",
                    "title": "input DELETE to continue"
                }
            ]).then((data)=>{
                if (data.confirmed!="DELETE") {
                    throw "not DELETE!";
                }
                return app.post("/remove/"+scope.id);
            }).then((json)=>{
                console.log(json);
                location.href = "/me/";
            }).catch((e)=>{ console.log(e); });
        });
        tools.add("note_add","create",()=>{
            let editor = window.open("/edit/"+scope.id,"_blank").focus();
            console.log(editor);
            // TODO: make editor change will back to refresh this one
        });
        tools.add("input","import",()=>{});
    };
});

app.ready((urlpath,urldata,ap)=>{
    return app.post("/list/"+urldata.repository,{});
}).then((json)=>{
    app.activate("repository");
    let repo = app.Module("repository");
    repo.id = json.id;
    repo.Layout.get("caption").set(json.name);
    repo.Layout.get("toc").load(json.rows);
});
{% endblock %}
</script>